# -*- coding: utf-8 -*-
"""
Created on Sun Mar 22 22:54:34 2020

@author: abhi0
"""

#===================================================================================
# Binary Search
#===================================================================================
def binary_search(data, elem):

    low = 0
    high = len(data) - 1

    while low <= high:
      
        middle = (low + high)//2
       
        if data[middle] == elem:
            return middle
        elif data[middle] > elem:
            high = middle - 1
        else:
            low = middle + 1

    return -1
    
#===================================================================================
# create a new list called "newlist" out of the list "numbers",
# which contains only the positive numbers from the list, as integers.
#===================================================================================
numbers = [34.6, -203.4, 44.9, 68.3, -12.2, 44.6, 12.7]
newlist = []
print(newlist)

# Traditional Way Loopping
for i in numbers:
    if i > 0:
        newlist.append(i)
print(newlist)

# list comprehension
# The first one is not working
c=[newlist.append(i) for i in numbers if i > 0]
print(c)
# This is working
newlist = [int(x) for x in numbers if x > 0]
print(newlist)

#===================================================================================
'''
The goal is to create a dictionary that maps each item in the input list 
to the itemâ€™s index in that very list. This dictionary can then be used 
to look up indices using items as keys
input = ['Duration', 'F0', 'F1', 'F2', 'F3']
output = {'Duration': 0, 'F0': 1, 'F1': 2, 'F2': 3, 'F3': 4}
'''
#===================================================================================
input = ['Duration', 'F0', 'F1', 'F2', 'F3']
dct={}
# Through traditional Looping
for i,itm in enumerate(input):
    # print(i)
    # print(itm)
    dct[itm] = i
    print('inside the loop ',i, dct)
print('Final dictionary',dct)

# Dictionary Comprehension works
print({itm:i for i,itm in enumerate(input)})
# List Comprehension works
print([itm for i,itm in enumerate(input)])

# Comprehension does not work with Tuples
print((itm for i,itm in enumerate(input)))


# Magical Behaviour of Enumerate
print(dict(enumerate(input)))
print(list(enumerate(input)))
print(tuple(enumerate(input)))

# Enumerate does not work for string
print(str(enumerate(input)))


#===================================================================================
# List Comprehension to print all the OSErrors
#===================================================================================

import os
import errno

# A Dictionary is created with errocode as key and error name as value
print({i: os.strerror(i) for i in sorted(errno.errorcode)})

#===================================================================================
# Return a new dictionary
#===================================================================================

marks = {}.fromkeys(['Math','English','Science'], 0)
print(marks)

#===================================================================================
# Unpacking Nested Data Structures in Python
#===================================================================================

a, b, c = 1, 2, 3
print(type(a))
print(type(b))
print(type(c))
a, *b, c = 1, 2, 3,4
print(type(a))
print(type(b))
print(type(c))


animals = [
   'bird',
   'fish',
   'elephant']

for f, *_, l in animals:
    print(f, l)

# This produces error    
for i,itm in animals:
    print(i, itm)
    
for i,itm in enumerate(animals):
    print(i, itm)
#===================================================================================

#===================================================================================
#===================================================================================
#===================================================================================

#===================================================================================
#===================================================================================
#===================================================================================
#===================================================================================

#===================================================================================

#===================================================================================

#===================================================================================
#===================================================================================
#===================================================================================
#===================================================================================

#===================================================================================
#===================================================================================

#===================================================================================

#===================================================================================
#===================================================================================
#===================================================================================
#===================================================================================
#===================================================================================

#===================================================================================

#===================================================================================

#===================================================================================
#===================================================================================

#===================================================================================

#===================================================================================
#===================================================================================

#===================================================================================

#===================================================================================

#===================================================================================

#===================================================================================

#===================================================================================

#===================================================================================

#===================================================================================
#===================================================================================

#===================================================================================
#===================================================================================

#===================================================================================
#===================================================================================

#===================================================================================
#===================================================================================

#===================================================================================

#===================================================================================

#===================================================================================
#===================================================================================
#===================================================================================

#===================================================================================

#===================================================================================
#===================================================================================
